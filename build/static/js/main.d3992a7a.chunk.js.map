{"version":3,"sources":["action/actionTypes.ts","reducer/state.ts","action/actions.ts","Components/todoList/todoList.tsx","Components/homePage/homepage.tsx","middleware/thunkMiddleware.ts","reducer/rootReducer.ts","reducer/index.ts","store/index.ts","Components/formControls/inputField.tsx","Components/formControls/index.ts","Components/formControls/radioGroupField.tsx","Components/createTodo/createNewTodo.tsx","Components/showSingleTodo/showSingleTodo.tsx","Components/cardsDemo/cardsDemoStyle.ts","Components/youtubePlayVideo/youtubePlayVideo.tsx","Components/youtubeList/youtubeList.tsx","Components/youtubeIds/youtubeIds.ts","Components/cardsDemo/cardsDemo.tsx","Components/loginCards/login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Types","todoFetchRequest","console","log","type","TODO_FETCH_REQUEST","ytItemsFetchRequest","YT_ITEMS_FETCH_REQUEST","ytItemsFetchSuccess","items","YT_ITEMS_FETCH_SUCCESS","payload","ytItemsFetchFailure","error","YT_ITEMS_FETCH_FAILURE","fetchTodo","dispatch","axios","get","then","responce","todos","datas","data","TODO_FETCH_SUCCESS","catch","errorMsg","message","TODO_FETCH_FAILURE","todoFetchFailure","postTodo","newTodo","post","TODO_POST_SUCCESS","todoPostSuccess","TODO_POST_FAILURE","todoPostFailure","deleteTodo","todoId","delete","status","TODO_DELETE_SUCCESS","todoDeleteSuccess","TODO_DELETE_FAILURE","todoDeleteFailure","updateTodo","updateData","put","updatedTodoData","TODO_UPDATE_SUCCESS","TODO_UPDATE_FAILURE","todoUpdateFailure","useStyles","makeStyles","theme","root","display","backgroundColor","tblHead","position","top","border","fontWeight","fontSize","color","tblBody","btn","marginLeft","margin","newEntryBtn","background","borderRadius","padding","connect","state","todoDatas","todoReducer","useState","showSingleTodo","setShowSingleTodo","history","useHistory","useEffect","classes","to","Grid","container","className","Typography","align","variant","component","Button","disableRipple","style","textDecoration","loading","Table","TableHead","TableRow","TableCell","TableBody","map","todo","onClick","id","push","generatePath","userId","title","completed","toString","Homepage","middleware","applyMiddleware","ReduxThunk","todoStateModel","todoState","youtubeItemsState","pageInfo","totalResults","resultsPerPage","nextPageToken","rootReducer","combineReducers","action","filter","youtubeReducer","nextPageId","hasOwnProperty","store","createStore","InputField","name","value","label","disabled","onChange","TextField","placeholder","FormControls","RadioGroupField","options","FormControl","FormLabel","RadioGroup","row","option","FormControlLabel","control","Radio","spacing","formContainer","alignItems","justifyContent","flexDirection","width","buttonContainer","height","btnLink","submitedNewTodo","setSubmitedNewTodo","undefined","setNewTodo","onChangeEvent","e","fieldName","target","val","onSubmitEvent","preventDefault","Paper","square","data-testid","onSubmit","actionButtonContainer","closebuttonContainer","todoData","useParams","Object","values","updateTodoId","existingTodoData","find","backToTodoList","setbackToTodoList","updateTodoData","setUpdateTodoData","onChangeUpdateEvent","onSubmitUpdateEvent","item","headerCard","marginTop","bodyCards","marginBottom","paddingLeft","paddingRight","centerCard","leftCard","rightCard","marginRight","FooterCard","closeIconButton","right","YoutubePlayVideo","videoId","setPlayVideoId","videoURL","IconButton","Close","src","frameBorder","allow","allowFullScreen","heading","divContainer","overflowY","itemsList","listing","listStyle","listContainer","youtubeItems","fetchYoutubeItems","playVideoId","totalPages","hasMorePage","setHasMorePage","dataLength","length","next","hasMore","loader","scrollableTarget","index","snippet","resourceId","keys","thumbnails","medium","url","alt","description","CardsDemo","loginDetails","Card","CardContent","xs","username","Login","cardsPage","setCardsPage","password","loginData","inputLogin","setInputLogin","App","exact","path","HomePage","CreateNewTodo","ShowSingleTodo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3992a7a.chunk.js","sourcesContent":["export enum Types {\n    TODO_FETCH_REQUEST = 'TODO_FETCH_REQUEST',\n    TODO_FETCH_SUCCESS = 'TODO_FETCH_SUCCESS',\n    TODO_FETCH_FAILURE = 'TODO_FETCH_FAILURE',\n    TODO_POST_SUCCESS = 'TODO_POST_SUCCESS',\n    TODO_POST_FAILURE = 'TODO_POST_FAILURE',\n    TODO_DELETE_SUCCESS = 'TODO_DELETE_SUCCESS',\n    TODO_DELETE_FAILURE = 'TODO_DELETE_FAILURE',\n    TODO_UPDATE_SUCCESS = 'TODO_UPDATE_SUCCESS',\n    TODO_UPDATE_FAILURE = 'TODO_UPDATE_FAILURE',\n    YT_ITEMS_FETCH_REQUEST = 'YT_ITEMS_FETCH_REQUEST',\n    YT_ITEMS_FETCH_SUCCESS = 'YT_ITEMS_FETCH_SUCCESS',\n    YT_ITEMS_FETCH_FAILURE = 'YT_ITEMS_FETCH_FAILURE',\n}","export interface actionsObject {\n    type: string,\n    payload?: any\n}\nexport interface todoObject {\n    userId: number | undefined,\n    id?: number,\n    title: string,\n    completed: boolean\n}\n\nexport interface todoStateObject {\n    loading: boolean,\n    datas: todoObject[],\n    error: string\n}\nexport interface youtubeItemsStateObject {\n    pageInfo: pageInfo,\n    nextPageToken? : string,\n    loading: boolean,\n    datas: any[],\n    error: string\n}\n\nexport interface pageInfo {\n    totalResults: number,\n    resultsPerPage: number\n}\n\nexport interface errorObject {\n    error: string\n}\n\nexport interface rootStateObject {\n    todos: todoStateObject,\n    youtubeItems : youtubeItemsStateObject\n}\n\nexport namespace todoStateModel {\n    export type todoStateObjType = todoStateObject\n    export type rootStateObjType = rootStateObject\n    export type actionsObjType = actionsObject\n    export type todoObjectType = todoObject\n    export type youtubeItemsObjectType = youtubeItemsStateObject\n    export type errorObjType = errorObject\n}\n\n","import React, { Dispatch } from \"react\";\nimport { StateModel } from \"../reducer\";\nimport { Types } from \"./actionTypes\";\nimport axios from \"axios\";\nimport * as YTIds from '../Components/youtubeIds/youtubeIds'\n\n\nconst todoFetchRequest = (): StateModel.actionsObject => {\n    console.log('Req')\n    return {\n        type: Types.TODO_FETCH_REQUEST\n    }\n}\n\nconst todoFetchSuccess = (todos: StateModel.todoStateObject): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_FETCH_SUCCESS,\n        payload: todos\n    }\n}\n\nconst todoFetchFailure = (error: string): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_FETCH_FAILURE,\n        payload: error\n    }\n}\n\nconst todoPostSuccess = (newTodo: StateModel.todoStateObject): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_POST_SUCCESS,\n        payload: newTodo\n    }\n}\n\nconst todoPostFailure = (error: string): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_POST_FAILURE,\n        payload: error\n    }\n}\n\nconst todoDeleteSuccess = (todoId : number): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_DELETE_SUCCESS,\n        payload: todoId\n    }\n}\n\nconst todoDeleteFailure = (error : string): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_DELETE_FAILURE,\n        payload: error\n    }\n}\n\nconst todoUpdateSuccess = (updatedTodoData : StateModel.todoObject): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_UPDATE_SUCCESS,\n        payload: updatedTodoData\n    }\n}\n\nconst todoUpdateFailure = (error: string): StateModel.actionsObject => {\n    return {\n        type: Types.TODO_UPDATE_FAILURE,\n        payload: error\n    }\n}\nexport const fetchYoutubeItems = (nextPageToken: string) => {      \n    console.log('Fetched')                 \n    return (dispatch: Dispatch<StateModel.actionsObject>) => {  \n                             \n        dispatch(ytItemsFetchRequest())\n        axios.get(`${YTIds.baseUrl}?part=snippet&playlistId=${YTIds.playlistId}&maxResults=${10}&key=${YTIds.YTKey}&pageToken=${nextPageToken}`)\n        .then(responce => {\n            console.log('Fetched', responce.data)\n            // const datas: StateModel.youtubeItemsStateObject = responce.data.items\n            const datas: StateModel.youtubeItemsStateObject = responce.data\n            dispatch(ytItemsFetchSuccess(datas))       //Set the responce data list to state in the store\n                                                    //It's transfer tto Reducer. It can't make changes in the store\n        })\n        .catch(error => {\n            const errorMsg: string = error.message\n            dispatch(ytItemsFetchFailure(errorMsg))\n        })\n    }\n}\n\n//This is a Thunk middleware, It's return the dispatch()'s\n//It's best for API calls and Logging\nconst ytItemsFetchRequest = (): StateModel.actionsObject => {\n    console.log('Req')\n    return {\n        type: Types.YT_ITEMS_FETCH_REQUEST\n    }\n}\n\nconst ytItemsFetchSuccess = (items: StateModel.youtubeItemsStateObject): StateModel.actionsObject => {\n    console.log('success',items)\n    return {\n        type: Types.YT_ITEMS_FETCH_SUCCESS,\n        payload: items\n    }\n}\n\nconst ytItemsFetchFailure = (error: string): StateModel.actionsObject => {\n    return {\n        type: Types.YT_ITEMS_FETCH_FAILURE,\n        payload: error\n    }\n}\nexport const fetchTodo = () => {      \n    console.log('Fetched')                 \n    return (dispatch: Dispatch<StateModel.actionsObject>) => {  \n                             \n        dispatch(todoFetchRequest())\n         axios.get(`https://jsonplaceholder.typicode.com/todos`)\n        .then(responce => {\n            console.log('Fetched')\n            const datas: StateModel.todoStateObject = responce.data\n            dispatch(todoFetchSuccess(datas))       //Set the responce data list to state in the store\n                                                    //It's transfer tto Reducer. It can't make changes in the store\n        })\n        .catch(error => {\n            const errorMsg: string = error.message\n            dispatch(todoFetchFailure(errorMsg))\n        })\n    }\n}\nexport const postTodo = (newTodo: StateModel.todoObject) => {\n    return (dispatch: Dispatch<StateModel.actionsObject>) => {                          \n    dispatch(todoFetchRequest())\n    axios.post(`https://jsonplaceholder.typicode.com/todos`, newTodo)\n    .then(responce => {\n        const datas = responce.data\n        console.log(responce)\n        console.log(datas)\n        console.log('axios post call')\n        dispatch(todoPostSuccess(datas))\n    })\n    .catch(error => {\n        const errorMsg = error.message\n        console.log(errorMsg)\n        dispatch(todoPostFailure(errorMsg))\n    })\n    }\n}\nexport const deleteTodo = (todoId: number) => {\n    return (dispatch: Dispatch<StateModel.actionsObject>) => {                          \n        dispatch(todoFetchRequest())\n        axios.delete(`https://jsonplaceholder.typicode.com/todos/${todoId}`)\n        .then(responce => {\n            // const datas = responce.data\n            console.log(responce.status)\n            // console.log(datas)\n            dispatch(todoDeleteSuccess(todoId))\n        })\n        .catch(error => {\n            const errorMsg = error.message\n            console.log(errorMsg)\n            dispatch(todoDeleteFailure(errorMsg))\n        })\n    }\n}\n\nexport const updateTodo = (todoId: number, updateData: StateModel.todoObject) => {\n    return (dispatch: Dispatch<StateModel.actionsObject>) => {\n        dispatch(todoFetchRequest())\n        axios.put(`https://jsonplaceholder.typicode.com/users/${todoId}`, updateData)\n        .then(responce => {\n            console.log(responce)\n            dispatch(todoUpdateSuccess(responce.data))\n        })\n        .catch(error => {\n            dispatch(todoUpdateFailure(error.message))\n            console.log(error.message)\n        })\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect, generatePath, useHistory } from \"react-router-dom\";\nimport { fetchTodo } from \"../../action\";\nimport { StateModel } from \"../../reducer\";\nimport { Grid, Typography, Table, TableHead, TableBody, TableRow, TableCell, makeStyles, Theme, Button } from \"@material-ui/core\"\nimport { Console } from \"console\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'block',\n        backgroundColor: '#f2f2f2',\n    },\n    tblHead: {\n    //   backgroundColor: '#000000',\n    // backgroundColor: 'linear-gradient(60deg, #3366ff 30%, #99b3ff 70%)',\n\n    '& .MuiTableCell-head': {\n        position: 'sticky',\n        top: 0,\n        backgroundColor: '#4d4d33',\n    },\n    '& .MuiTableCell-root': {\n        border: '1px solid black',\n        fontWeight: 'bold',\n        fontSize: '20px',\n        color: 'white',\n    }\n    },\n    tblBody: {\n    '& .MuiTableCell-root': {\n            border: '1px solid black',\n            fontSize: '18px',\n            color: 'black',\n            backgroundColor: '#c2c2a3',\n        },\n    },\n    btn: {\n        display: 'flex',\n        marginLeft: 'auto',\n        margin: '2px'\n    },\n    newEntryBtn: {\n        background: 'linear-gradient(60deg, #3366ff 30%, #99b3ff 70%)',\n        border: 0,\n        borderRadius: 3,\n        // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        fontWeight: 'bold',\n        color: 'white',\n        padding: '8px',\n    '&:hover': {\n        color: 'white',\n    }\n    },\n}))\n\ninterface Props {\n    todoDatas: StateModel.todoStateObject,\n    fetchTodo: any,\n}\n\n//This two props params got from this component using connect method\nconst TodosList = ({ todoDatas, fetchTodo }: Props) => {\n    console.log('Hi useEff')\n    console.log(todoDatas)\n\n    const [showSingleTodo, setShowSingleTodo] = useState<boolean>(false)\n    const history = useHistory()\n\n    //fetchTodo method called for dispatch the fetching the API data\n    useEffect(() => {\n        fetchTodo()\n    }, [])\n\n\n    const singleTodo = (todoId: number | undefined) => {\n        todoId && history.push(generatePath(\"/singleTodo/:todoId\", { todoId }));\n        console.log('single', todoId)\n        setShowSingleTodo(true)\n    }\n\n    const classes = useStyles();\n    if (showSingleTodo) {\n        return (\n            <Redirect to=\"/singleTodo/:todoId\" />\n        )\n    }\n    return (\n        <>\n            <Grid container className={classes.root}>\n            <Typography align=\"center\" variant=\"h4\" component=\"div\">\n                To-Do List Page\n            </Typography>\n            <Button disableRipple className={classes.btn}>\n                <Link style={{textDecoration:'none'}} className={classes.newEntryBtn} to=\"/newTodo\">New Entry</Link>\n            </Button>\n                {\n                    todoDatas.loading ? (<div>Loading</div>) :\n                        todoDatas.error ? (<div>{todoDatas.error}</div>) :\n                            (\n                                    <Table>\n                                        <TableHead className={classes.tblHead}>\n                                            <TableRow>\n                                                <TableCell>Id</TableCell>\n                                                <TableCell>User Id</TableCell>\n                                                <TableCell>To-Do</TableCell>\n                                                <TableCell>Completed</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody className={classes.tblBody}>\n                                            {\n                                                todoDatas && todoDatas.datas.map(\n                                                    todo =>\n                                                        <TableRow key={todo.id} onClick={() => singleTodo(todo.id)}>\n                                                            <TableCell>{todo.id}</TableCell>\n                                                            <TableCell>{todo.userId}</TableCell>\n                                                            <TableCell>{todo.title}</TableCell>\n                                                            <TableCell>{todo.completed.toString()}</TableCell>\n                                                        </TableRow>)\n                                            }\n                                        </TableBody>\n                                    </Table>\n                            )\n                }\n            </Grid>\n        </>\n    )\n\n}\n//Subscribe method which the store value is gets and pass as a props\nconst mapStateToProps = (state: any) => {\n    return {\n        todoDatas: state.todoReducer\n    }\n}\n//This is a dispatch method and it return the dispatch() which perform Async\n//fetchTodo() is a Thunk middleware which returns functions of dispatch(REQUEST,SUCCESS,FAILURE)\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchTodo: () => dispatch(fetchTodo()),\n    }\n}\n//Here \"connect(WillChangeProps)(Component)\" method is used to convert the state value into props to in this own component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosList)","import React, {  } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TodosList } from \"../todoList\";\n\nconst Homepage = (): JSX.Element => {\n    return(\n        <div>\n            <div>\n                <Link to=\"/login\">Login Page</Link>\n            </div>\n            <div>\n                <TodosList />\n            </div>\n        </div>\n    )\n}\n\nexport default Homepage;","import { applyMiddleware } from \"redux\";\nimport ReduxThunk from 'redux-thunk';\n\nexport const middleware = applyMiddleware(ReduxThunk)","import { Types } from \"../action\";\nimport { StateModel } from \"./index\"\n\n//Initial state\nconst todoState: StateModel.todoStateObject = {\n    loading: true,\n    datas: [],\n    error: ''\n}\n\n//Reducer set the initial state and set How to change the value in the state\n//Reducer only have the ability to perform in the store to change the state values\n//action type and payload gets from Action Creator Object\nexport const todoReducer = (state: StateModel.todoStateObject = todoState, action: StateModel.actionsObject): StateModel.todoStateObject => {\n    switch (action.type) {\n        case Types.TODO_FETCH_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n        case Types.TODO_FETCH_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                datas: action.payload,\n                error: ''\n            }\n        case Types.TODO_FETCH_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                datas: [],\n                error: action.payload\n            }\n        case Types.TODO_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                datas: [...state.datas, action.payload],\n                error: ''\n            }\n        case Types.TODO_POST_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        case Types.TODO_DELETE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                datas: state.datas.filter(datas => action.payload !== datas.id),\n                // datas: [...state.datas, action.payload],\n                error: ''\n            }\n        case Types.TODO_DELETE_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        case Types.TODO_UPDATE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                datas: state.datas.map(data => (data.id === action.payload.id ? action.payload : data)),\n                error: ''\n            }\n        case Types.TODO_UPDATE_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            }\n        default: return state\n    }\n}\nconst youtubeItemsState: StateModel.youtubeItemsStateObject = {\n    pageInfo: {\n        totalResults: 0,\n        resultsPerPage: 0\n    },\n    nextPageToken: '',\n    loading: true,\n    datas: [],\n    error: ''\n}\nexport const youtubeReducer = (state: StateModel.youtubeItemsStateObject = youtubeItemsState, action: StateModel.actionsObject): StateModel.youtubeItemsStateObject => {\n    // console.log('reducer', action)\n    switch (action.type) {\n        case Types.YT_ITEMS_FETCH_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n        case Types.YT_ITEMS_FETCH_SUCCESS:\n            let nextPageId: string = '';\n            if(action.payload.hasOwnProperty('nextPageToken')){\n                nextPageId = action.payload.nextPageToken;\n            }\n            let pageInfo: StateModel.pageInfo = action.payload.pageInfo;\n            console.log('pageInfo', action.payload.pageInfo)\n            return {\n                ...state,\n                    pageInfo : {totalResults: pageInfo.totalResults,\n                        resultsPerPage: pageInfo.resultsPerPage},\n                    nextPageToken: nextPageId,\n                    loading: false,\n                    datas: [...state.datas, ...action.payload.items],\n                    error: ''\n            }\n        case Types.YT_ITEMS_FETCH_FAILURE:\n            return {\n                ...state,\n                    loading: false,\n                    datas: [],\n                    error: action.payload\n            }\n        default: return state\n    }\n}","import * as StateModel from \"./state\";\nimport { todoReducer, youtubeReducer } from \"./rootReducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n    todoReducer,\n    youtubeReducer\n})\nexport { StateModel, rootReducer }","import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from 'redux-thunk';\nimport { middleware } from \"../middleware\";\nimport { rootReducer } from \"../reducer\";\n\nexport const store = createStore(rootReducer, middleware)\n","import React, { SetStateAction, Dispatch } from \"react\";\nimport { InputLabel, TextField } from \"@material-ui/core\";\n\n\ninterface Props {\n    name: string,\n    value: string | number | undefined,\n    label: string,\n    disabled: boolean\n    onChange: Dispatch<SetStateAction<any>>\n}\n\nconst InputField = ({name, value, label, disabled, onChange}: Props) => {\n    return (\n        <TextField\n        disabled={disabled}\n        label={label}\n        placeholder={label}\n        variant=\"outlined\" \n        name={name}\n        value={value}\n        onChange={onChange}\n        />\n    )\n}\n\nexport default InputField;","import React from \"react\";\nimport InputField from \"./inputField\";\nimport RadioGroupField from \"./radioGroupField\";\n\nexport const FormControls =  {InputField, RadioGroupField}","import React, { Dispatch, SetStateAction } from \"react\";\nimport { FormControl, FormLabel, RadioGroup, Radio, FormControlLabel } from \"@material-ui/core\";\n\ninterface option {\n    value: string | boolean,\n    label: string\n}\n\ninterface Props {\n    name: string,\n    value: string | boolean,\n    label: string,\n    options: option[]\n    onChange: Dispatch<SetStateAction<any>>\n}\n\nconst RadioGroupField = ({ name, value, label, options, onChange }: Props) => {\n    console.log(options)\n    return (\n        <FormControl>\n            <FormLabel>{label}</FormLabel>\n            <RadioGroup row={true}\n                name={name}\n                value={value.toString()}\n                onChange={onChange} >\n                {\n                    options && options.map((option) => (\n                        <FormControlLabel key={option.label} value={option.value} control={<Radio />} label={option.label} />\n                    ))\n                }\n            </RadioGroup>\n        </FormControl>\n    )\n\n}\n\nexport default RadioGroupField;","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { StateModel } from \"../../reducer\";\nimport { FormControls } from \"../formControls\";\nimport { postTodo } from \"../../action\"\nimport { Button, makeStyles, Theme, Typography, Grid, Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        // display: 'block',\n        padding: theme.spacing(2),\n        margin: theme.spacing(5),\n\n    },\n    formContainer: {\n        display: 'flex',\n        // margin: theme.spacing(2),\n        padding: theme.spacing(2),\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n\n        '& .MuiFormControl-root': {\n            '& :focus': {\n                backgroundColor: '#e6f5ff',\n            },\n            width: '35%',\n            margin: theme.spacing(1),\n        },\n    },\n    buttonContainer: {\n        display: 'flex',\n        margin: theme.spacing(2),\n        padding: theme.spacing(0),\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    btn:  {\n        borderRadius: 5,\n        height: '40px',\n        width: '100px',\n        margin: theme.spacing(1),\n        padding: theme.spacing(0),\n        '& :hover':{\n            color: '#000000',\n        },\n    },\n    btnLink: {\n        borderRadius: 5,\n        // backgroundColor: '#ffcccc',\n        color: '#cc0000',\n        padding: theme.spacing(1),\n        height: '40px',\n        width: '100px',\n    },\n}));\n\ninterface Props {\n    postTodo: any\n}\nconst CreateNewTodo = ({ postTodo }: Props) => {\n    console.log('new Todo')\n\n    const [submitedNewTodo, setSubmitedNewTodo] = useState<boolean>(false)\n    const options = [\n        { value: \"true\", label: \"True\" },\n        { value: \"false\", label: \"False\" }\n    ]\n\n    const [newTodo, setNewTodo] = useState<StateModel.todoObject>({\n        userId: undefined,\n        title: '',\n        completed: false\n    })\n\n    const onChangeEvent = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n        const fieldName = e.target.name\n        const value = e.target.value\n\n        if (fieldName === \"completed\") {\n            const val = (value === \"true\")\n            setNewTodo({ ...newTodo, [fieldName]: val })\n        } else {\n            setNewTodo({ ...newTodo, [fieldName]: value })\n        }\n    }\n    const onSubmitEvent = (e: React.FormEvent<HTMLFormElement | HTMLButtonElement>) => {\n\n        postTodo(newTodo)\n        console.log(newTodo)\n        // alert('New Todo Added')\n        setSubmitedNewTodo(true)\n        e.preventDefault()\n    }\n\n    const classes = useStyles();\n    if (submitedNewTodo) {\n        return <Redirect to=\"/\" />\n    }\n    return (\n        <>\n            <Typography align=\"center\" variant=\"h4\" component=\"div\">\n                Create New Todo\n            </Typography>\n            <Paper variant=\"outlined\" square className={classes.root}>\n            <form data-testid=\"create-todo-form\" onSubmit={onSubmitEvent}>\n                <Grid container  className={classes.formContainer}>\n                <FormControls.InputField\n                    name=\"userId\"\n                    value={newTodo.userId}\n                    onChange={onChangeEvent}\n                    label=\"User Id\"\n                    disabled={false}\n                />\n                <FormControls.InputField\n                    name=\"title\"\n                    value={newTodo.title}\n                    onChange={onChangeEvent}\n                    label=\"Title\"\n                    disabled={false}\n                />\n                    <FormControls.RadioGroupField\n                    name=\"completed\"\n                    value={newTodo.completed}\n                    onChange={onChangeEvent}\n                    options={options}\n                    label=\"Completed\"\n                />\n                </Grid>\n                <Grid container className={classes.buttonContainer}>\n                <Button type=\"submit\" onSubmit={(e) => onSubmitEvent(e)}\n                    className={classes.btn}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    data-testid=\"create-todo-submit\">\n                    Submit\n                    </Button>\n                <Button color=\"secondary\"\n                    variant=\"outlined\"\n                    className={classes.btn} >\n                    <Link className={classes.btnLink} style={{textDecoration:'none'}} to=\"/\">Close</Link>\n                </Button>\n                </Grid>\n            </form>\n            </Paper>\n        </>\n    )\n\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        postTodo: (newTodo: StateModel.todoObject) => dispatch(postTodo(newTodo)),\n    }\n}\nexport default connect(null, mapDispatchToProps)(CreateNewTodo);\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StateModel } from \"../../reducer\";\nimport { updateTodo, deleteTodo } from \"../../action\";\nimport { Redirect, useParams, Link } from \"react-router-dom\";\nimport { FormControls } from \"../formControls\"\nimport { Typography, Paper, Grid, Button, makeStyles, Theme } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(4),\n        padding: theme.spacing(2),\n\n    },\n    formContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        // padding: theme.spacing(2),\n\n        '& .MuiFormControl-root': {\n            '& :focus': {\n                backgroundColor: '#e6f5ff',\n            },\n            width: '35%',\n            margin: theme.spacing(1),\n        },\n    },\n    actionButtonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    '& .MuiGrid-item': {\n        display: 'inline-flex',\n    },\n    '& .MuiButtonBase-root': {\n        height: '40px',\n        width: '210px',\n    },\n    },\n    closebuttonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    '& .MuiGrid-item': {\n        display: 'inline-flex',\n    },\n    '& .MuiButtonBase-root': {\n            height: '40px',\n            width: '436px',\n    },\n    },\n    btn: {\n        height: '50px',\n        width: '80%',\n        margin: theme.spacing(1)\n    }\n}));\n\ninterface Props {\n    todoDatas: StateModel.todoStateObject\n    updateTodo: any,\n    deleteTodo: any\n}\nconst ShowSingleTodo = ({ todoDatas, updateTodo, deleteTodo }: Props): JSX.Element => {\n\n    const todoId: { todoId: string } = useParams()\n    console.log(todoId.todoId)\n    console.log('update', Object.values(todoId))\n\n    const updateTodoId: number = +todoId.todoId\n\n    const existingTodoData: any = todoDatas.datas.find((data) => data.id === updateTodoId)\n    console.log(existingTodoData)\n\n    const [backToTodoList, setbackToTodoList] = useState<boolean>(false)\n    const [updateTodoData, setUpdateTodoData] = useState<StateModel.todoObject>({\n        id: 0,\n        userId: undefined,\n        title: '',\n        completed: false\n    })\n    const options = [\n        { value: \"true\", label: \"True\" },\n        { value: \"false\", label: \"False\" }\n    ]\n\n    useEffect(() => {\n        setUpdateTodoData(existingTodoData)\n    }, [])\n\n    const onChangeUpdateEvent = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const fieldName = e.target.name\n        const value = e.target.value\n\n        if (fieldName === \"completed\") {\n            const val = (value === \"true\")\n            setUpdateTodoData({ ...updateTodoData, [fieldName]: val })\n        } else {\n            setUpdateTodoData({ ...updateTodoData, [fieldName]: value })\n        }\n    }\n    const onSubmitUpdateEvent = (e: React.FormEvent<HTMLFormElement | HTMLButtonElement>) => {\n        console.log(\"updating\")\n        updateTodo(updateTodoId, updateTodoData)\n        setbackToTodoList(true)\n        e.preventDefault()\n    }\n\n    const onClickDeleteRow = () => {\n        deleteTodo(updateTodoId)\n        setbackToTodoList(true)\n        console.log(updateTodoId)\n    }\n\n    const onCloseSingleTodo = () => {\n        setbackToTodoList(true)\n    }\n\n    const classes = useStyles();\n\n    if (backToTodoList || existingTodoData === undefined) {\n        return <Redirect to=\"/\" />\n    }\n    return (\n        <>\n            <Typography align=\"center\" variant=\"h4\" component=\"div\">\n                Single Todo Details\n            </Typography>\n            <Paper  variant=\"outlined\" square className={classes.root}>\n                <form onSubmit={onSubmitUpdateEvent}>\n                    <Grid container className={classes.formContainer}>\n                        <FormControls.InputField\n                            name=\"id\"\n                            value={updateTodoData.id}\n                            onChange={onChangeUpdateEvent}\n                            label=\"Id\"\n                            disabled={true}\n                        />\n                        <FormControls.InputField\n                            name=\"userId\"\n                            value={updateTodoData.userId}\n                            onChange={(e) => onChangeUpdateEvent(e)}\n                            label=\"User Id\"\n                            disabled={false}\n                        />\n                        <FormControls.InputField\n                            name=\"title\"\n                            value={updateTodoData.title}\n                            onChange={(e) => onChangeUpdateEvent(e)}\n                            label=\"Title\"\n                            disabled={false}\n                        />\n                        <FormControls.RadioGroupField\n                            name=\"completed\"\n                            value={updateTodoData.completed}\n                            onChange={(e) => onChangeUpdateEvent(e)}\n                            options={options}\n                            label=\"Completed\"\n                        />\n                    </Grid>\n                    <Grid container className={classes.actionButtonContainer}>\n                        <Grid item>\n                            <Button type=\"submit\"\n                                onSubmit={(e) => onSubmitUpdateEvent(e)}\n                                className={classes.btn}\n                                color=\"primary\"\n                                variant=\"contained\">\n                                Update\n                            </Button>\n                            <Button type=\"submit\"\n                                className={classes.btn}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={onClickDeleteRow}>\n                                Delete\n                            </Button>\n                        </Grid>\n                        </Grid>\n                        <Grid container className={classes.closebuttonContainer}>\n                            <Grid item>\n                            <Button color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={onCloseSingleTodo}>\n                                Close\n                            </Button>\n                            </Grid>\n                        </Grid>\n                </form>\n            </Paper>\n        </>\n    )\n}\nconst mapStateToProps = (state: any) => {\n    return {\n        todoDatas: state.todoReducer\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        deleteTodo: (todoId: number) => dispatch(deleteTodo(todoId)),\n        updateTodo: (todoId: number, todoData: StateModel.todoObject) => dispatch(updateTodo(todoId, todoData))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowSingleTodo);","import { makeStyles, Theme } from \"@material-ui/core\";\nexport const useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: theme.spacing(0),\n        // minHeight: '100vh',\n        backgroundColor: 'rgb(36, 36, 36)',\n    },\n    '& .MuiCardContent-root': {\n        padding: theme.spacing(1),\n    },\n    headerCard: {\n        display: 'flex',\n        backgroundColor: 'rgb(160, 160, 160)',\n        marginTop: '1%',\n    },\n    bodyCards: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        '& .MuiCard-root': {\n            // height: '100%',\n            height: theme.spacing(60),\n            backgroundColor: 'rgb(160, 160, 160)',\n        },\n\n    },\n    centerCard: {\n        display: 'flex',\n        justifyContent: 'center',\n        border: '1px solid black',\n        // height: theme.spacing(30),\n    },\n    leftCard: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n\n    },\n    rightCard: {\n        marginRight: theme.spacing(1),\n    },\n    FooterCard: {\n        display: 'flex',\n        padding: theme.spacing(1),\n        marginTop: 'auto',\n        marginBottom: '1%',\n        backgroundColor: 'rgb(160, 160, 160)',\n    }\n}));","import React from \"react\";\nimport { IconButton, makeStyles, Theme} from '@material-ui/core'\nimport { Close } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme)=>({\n    root: {\n        position: 'relative',\n        height: '100%',\n        width: '100%',\n    },\n    closeIconButton: {\n        position: 'absolute',\n        padding: '0.4%',\n        margin: '0.4%',\n        top: 0,\n        right: 0,\n        backgroundColor: 'white',\n        '&:hover': {\n            backgroundColor: 'white',\n        }\n    },\n}))\n\n\n\ninterface Props {\n    videoId: string | undefined,\n    setPlayVideoId: any\n}\nconst YoutubePlayVideo = ({videoId, setPlayVideoId}: Props) => {\n    const classes = useStyles();\n    const videoURL = `https://www.youtube.com/embed/${videoId}`\n    return(\n        <div className={classes.root}>\n            <IconButton className={classes.closeIconButton} onClick={()=>setPlayVideoId(undefined)}>\n                <Close />\n            </IconButton>\n            <iframe width=\"100%\" height=\"100%\" src={videoURL} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>\n            </iframe>\n        </div>\n    )\n}\n\nexport default YoutubePlayVideo;","import React, { useEffect, useState } from \"react\";\nimport { fetchYoutubeItems } from '../../action/actions'\nimport { connect } from \"react-redux\";\nimport { StateModel } from \"../../reducer\";\nimport YoutubePlayVideo from '../youtubePlayVideo/youtubePlayVideo'\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        position: 'relative',\n        backgroundColor: 'white',\n        height: '100%',\n        // overflowY: 'scroll',\n    },\n    heading: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: '#2C3A47',\n        color: 'white',\n        fontWeight: 'bolder'\n    },\n    divContainer: {\n        height: '94%',\n        overflowY: 'scroll',\n    },\n    itemsList: {\n        overflowY: 'scroll',\n        height: '92%',\n    },\n    listing: {\n        listStyle: 'none',\n        paddingLeft: theme.spacing(1),\n    },\n    listContainer: {\n        display: 'flex',\n        paddingLeft: theme.spacing(1),\n        border: '1px solid black',\n        backgroundColor: '#f5f6fa',\n    },\n}))\n\ninterface Props {\n    fetchYoutubeItems: any,\n    youtubeItems: StateModel.youtubeItemsStateObject\n}\n\nconst YoutubeList = ({ fetchYoutubeItems, youtubeItems }: Props) => {\n    console.log('ytRender', youtubeItems)\n\n    const [nextPageToken, setNextPageToken] = useState<string | undefined>(youtubeItems.nextPageToken);\n    const [playVideoId, setPlayVideoId] = useState<string | undefined>(undefined)\n    const [totalPages, setTotalPages] = useState<number>(0)\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [hasMorePage, setHasMorePage] = useState<boolean>(true)\n\n    // useEffect(() => {\n    //     fetchYoutubeItems(nextPageToken)\n    // }, [nextPageToken])\n    useEffect(() => {\n        fetchYoutubeItems(nextPageToken)\n        // setNextPageToken(youtubeItems.nextPageToken)\n        console.log(\"useEffect Change First Page \",nextPageToken)\n    }, [])\n    // useEffect(()=>{\n    //     let totalResults = youtubeItems.pageInfo.totalResults;\n    //     let resultsPerPage = youtubeItems.pageInfo.resultsPerPage;\n    //     let totalPages: number = Math.ceil(totalResults/resultsPerPage)\n    //     console.log('ceil', totalPages)\n    //     setTotalPages(totalPages)\n    // }, [])\n\n    console.log('State Value', youtubeItems)\n    const onClickVideoId = (videoId: string) => {\n        console.log(videoId)\n        setPlayVideoId(videoId)\n    }\n    const onClickNextPage = () => {\n        if(currentPage <= 3){\n            setNextPageToken(youtubeItems.nextPageToken)\n            setCurrentPage(currentPage+1)\n        }else{\n            setHasMorePage(false)\n        }\n    }\n    const fetchData = () => {\n        if(youtubeItems.datas.length < youtubeItems.pageInfo.totalResults){\n            // setNextPageToken(youtubeItems.nextPageToken)\n            fetchYoutubeItems(youtubeItems.nextPageToken)\n            console.log('scrollFetching......')\n        }else{\n            setHasMorePage(false)\n            return;\n        }\n        // fetchYoutubeItems(nextPageToken)\n    }\n    console.log(\"pageInfo in main list Comp\",youtubeItems.pageInfo, 'TotalPages', totalPages)\n    console.log(\"useEffect Change First Page \",nextPageToken)\n    const classes = useStyles();\n    return (\n\n        <div className={classes.root}>\n            {\n                (playVideoId == undefined) ? (<div style={{height:'100%'}}>\n            <div className={classes.heading}><h5>Youtube Playlist Items</h5></div>\n            <div className={classes.divContainer} id=\"YOUTUBE_LIST_SCROLLABLE\">\n            <InfiniteScroll \n                dataLength={youtubeItems.datas.length}\n                next={fetchData}\n                hasMore={hasMorePage}\n                loader=\"Loading\"\n                // style={{height: '100%'}}\n                // className={classes.root}\n                scrollableTarget=\"YOUTUBE_LIST_SCROLLABLE\"\n                >\n                        {\n                            youtubeItems.datas.map((item: any, index: number) =>\n                                <div key={item.id} className={classes.listContainer} onClick={() => onClickVideoId(item.snippet.resourceId.videoId)}>\n                                    {\n                                        (Object.keys(item.snippet.thumbnails).length > 0) ? (<img src={item.snippet.thumbnails.medium.url} alt=\"\" width=\"60\" height=\"60\" />) :\n                                        (<img src='https://www.radiationreport.com/wp-content/uploads/2013/08/no-preview.jpg' alt=\"\" width=\"60\" height=\"60\" />)\n                                    }\n                                    <ul className={classes.listing}>\n                                        <li>{item.snippet.title}</li>\n                                        <li><b>Description : </b>{item.snippet.description}</li>\n                                    </ul>\n                                </div>)\n                        }\n            </InfiniteScroll> </div></div>) : (<YoutubePlayVideo videoId={playVideoId} setPlayVideoId={setPlayVideoId} />)\n            }\n\n            {/* {\n            //     (playVideoId == undefined) ? (<div className={classes.divContainer}><h3 className={classes.heading}>YouTube Playlist Videos</h3>\n            //         <div className={classes.itemsList}>\n            //             {youtubeItems.datas.map((item: any, index: number) =>\n            //                 <>\n            //                     <div className={classes.listContainer} onClick={() => onClickVideoId(item.snippet.resourceId.videoId)}>\n            //                         {\n            //                             (Object.keys(item.snippet.thumbnails).length > 0) && <img src={item.snippet.thumbnails.medium.url} alt=\"\" width=\"60\" height=\"60\" />\n            //                         }\n            //                         <ul key={item.id} className={classes.listing}>\n            //                             <li>{item.snippet.title}</li>\n            //                             <li><b>Description : </b>{item.snippet.description}</li>\n            //                         </ul>\n            //                     </div>\n            //                     {\n            //                         (youtubeItems.datas.length === index + 1) && (<button onClick={()=>onClickNextPage()}>Learn More</button>)\n            //                     }\n            //                 </>\n            //             )}\n            //         </div></div>) : (<YoutubePlayVideo videoId={playVideoId} setPlayVideoId={setPlayVideoId} />)\n            // } */}\n        </div>\n    )\n}\n\nconst mapState = (state: any) => {\n    return {\n        youtubeItems: state.youtubeReducer\n    }\n}\nconst mapDispatch = (dispatch: any) => {\n    return {\n        fetchYoutubeItems: (nextPageToken: string) => dispatch(fetchYoutubeItems(nextPageToken)),\n    }\n}\n\nexport default connect(mapState, mapDispatch)(YoutubeList);"," export const baseUrl = 'https://www.googleapis.com/youtube/v3/playlistItems';\n export const YTKey = 'AIzaSyAI6ZzfjRapTzmN_KdQfHfJipyn8K5hvVA';\n export const playlistId = 'PLxae24ZRVSi95IwYq6zrY7N0lDuYJyeUq';","import React, {useState} from \"react\";\nimport { useStyles } from './cardsDemoStyle'\nimport { Grid, Card, CardContent, CardActions, Typography, Paper, makeStyles, Theme, IconButton } from '@material-ui/core'\nimport { Add } from '@material-ui/icons';\nimport CardGame from \"../cardGame/cardGame\";\nimport YoutubeList from \"../youtubeList/youtubeList\";\n\ninterface loginData {\n    loginDetails: {\n        name?: string,\n        username: string,\n        password: string\n    }\n}\ninterface gameContainers {\n    cardR1C1: boolean,\n    cardR1C2: boolean,\n    cardR2C1: boolean,\n    cardR2C2: boolean,\n}\n\nconst CardsDemo = ({ loginDetails }: loginData): JSX.Element => {\n    console.log(loginDetails)\n    const classes = useStyles()\n\n    // const [gameContainers, setGameContainers] = useState<gameContainers>({\n    //     cardR1C1: false,\n    //     cardR1C2: false,\n    //     cardR2C1: false,\n    //     cardR2C2: false,\n    // })\n    // const onClickEvent = () => {\n    //     console.log('wirking button')\n    // }\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n                <Card variant='outlined' square className={classes.headerCard}>\n                    <CardContent>\n                        <Typography>\n                            Heading 1\n                    </Typography>\n                    </CardContent>\n                    <CardContent>\n                        <Typography>\n                            Heading 2\n                    </Typography>\n                    </CardContent>\n                </Card>\n                <Grid className={classes.bodyCards} container spacing={2}>\n                    <Grid item xs={3}>\n                        <Card variant='outlined' square>\n                            <CardContent>\n                                <Typography>\n                                    Left Card\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Card variant='outlined' square>\n                            <YoutubeList />\n                        </Card>\n                        {/* <Card variant='outlined' square>\n                            <Grid container>\n                                <Grid item xs={6} className={classes.centerCard}>\n                                    {\n                                        gameContainers.cardR1C1 ? (<CardGame setGameContainer={setGameContainers} gameContainer={gameContainers} cardName=\"cardR1C1\"/>) : \n                                        (<CardActions>\n                                            <IconButton onClick={()=>setGameContainers({...gameContainers, cardR1C1: true})}>\n                                                <Add />\n                                            </IconButton>\n                                        </CardActions>)\n                                    }\n                                </Grid>\n                                <Grid item xs={6} className={classes.centerCard}>\n                                {\n                                        gameContainers.cardR1C2 ? (<CardGame setGameContainer={setGameContainers} gameContainer={gameContainers} cardName=\"cardR1C2\"/>) : \n                                        (<CardActions>\n                                            <IconButton onClick={()=>setGameContainers({...gameContainers, cardR1C2: true})}>\n                                                <Add />\n                                            </IconButton>\n                                        </CardActions>)\n                                    }\n                                </Grid>\n                            </Grid>\n                            <Grid container>\n                                <Grid item xs={6} className={classes.centerCard}>\n                                {\n                                        gameContainers.cardR2C1 ? (<CardGame setGameContainer={setGameContainers} gameContainer={gameContainers} cardName=\"cardR2C1\"/>) : \n                                        (<CardActions>\n                                            <IconButton onClick={()=>setGameContainers({...gameContainers, cardR2C1: true})}>\n                                                <Add />\n                                            </IconButton>\n                                        </CardActions>)\n                                    }\n                                </Grid>\n                                <Grid item xs={6} className={classes.centerCard}>\n                                {\n                                        gameContainers.cardR2C2 ? (<CardGame setGameContainer={setGameContainers} gameContainer={gameContainers} cardName=\"cardR2C2\"/>) : \n                                        (<CardActions>\n                                            <IconButton onClick={()=>setGameContainers({...gameContainers, cardR2C2: true})}>\n                                                <Add />\n                                            </IconButton>\n                                        </CardActions>)\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Card>  */}\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Card variant='outlined' square>\n                            <CardContent>\n                                <Typography>\n                                    Right Card\n                    </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                </Grid>\n                <Card variant='outlined' square className={classes.FooterCard}>\n                    <CardContent>\n                        <Typography>\n                            {loginDetails.name}\n                        </Typography>\n                    </CardContent>\n                    <CardContent>\n                        <Typography>\n                            {loginDetails.username}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Paper>\n\n        </div>\n    )\n}\n\nexport default CardsDemo;","import React, { useState } from \"react\";\nimport CardsDemo from '../cardsDemo/cardsDemo'\n\nconst Login = () => {\n\n    interface loginDataProps {\n        name?: string,\n        username: string,\n        password: string\n    }\n    const [cardsPage, setCardsPage] = useState<boolean>(false)\n    const [loginData, setLoginData] = useState<loginDataProps>({\n        name: 'Imran Basha',\n        username: 'imran',\n        password: '123'\n    })\n\n    const [inputLogin, setInputLogin] = useState<loginDataProps>({\n        username: '',\n        password: ''\n    })\n\n    const onChangeEvent = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;\n        setInputLogin({ ...inputLogin, [name]: value })\n    }\n    const onSubmitEvent = (e: React.FormEvent<HTMLButtonElement | HTMLFormElement>) => {\n        e.preventDefault()\n        setCardsPage(true)\n        // if(loginData.username == inputLogin.username){\n        //     if(loginData.password == inputLogin.password){\n        //         setCardsPage(true)\n        //         alert('Login Success')\n        //     }\n        // }\n    }\n    if (cardsPage) {\n        return <CardsDemo loginDetails={loginData} />\n    }\n    return (\n        <div>\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => onSubmitEvent(e)}>\n            <div>\n                <label>Username : </label>\n                <input type=\"text\" value={inputLogin.username} placeholder=\"Username\" name=\"username\" onChange={(e: React.ChangeEvent<HTMLInputElement>)=>onChangeEvent(e)} />\n            </div>\n            <div>\n                <label>Password : </label>\n                <input type=\"text\" value={inputLogin.password} placeholder=\"Password\" name=\"password\" onChange={(e: React.ChangeEvent<HTMLInputElement>)=>onChangeEvent(e)} />\n            </div>\n            <div>\n                <button type=\"submit\" onSubmit={(e: React.FormEvent<HTMLButtonElement>)=>onSubmitEvent(e)}>Submit</button>\n            </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { HomePage } from \"./Components/homePage\";\nimport { TodosList } from \"./Components/todoList\";\nimport { Provider } from 'react-redux';\nimport { store } from \"./store\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { CreateNewTodo } from \"./Components/createTodo\";\nimport { ShowSingleTodo } from './Components/showSingleTodo';\nimport { Login } from './Components/loginCards';\n\nconst App = () => {\n  return (\n    <div>\n      <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/newTodo\" component={CreateNewTodo} />\n          <Route path=\"/singleTodo/:todoId\" component={ShowSingleTodo} />\n          <Route path=\"/login\" component={Login} />\n        </Switch>\n      </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}